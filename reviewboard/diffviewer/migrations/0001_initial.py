# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2022-05-08 20:06
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djblets.db.fields.base64_field
import djblets.db.fields.json_field
import djblets.db.fields.relation_counter_field
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('scmtools', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='DiffCommit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(help_text='The original file name of the diff.', max_length=256, verbose_name='File Name')),
                ('author_name', models.CharField(help_text='The name of the commit author.', max_length=256, verbose_name='Author Name')),
                ('author_email', models.CharField(help_text='The e-mail address of the commit author.', max_length=256, verbose_name='Author Email')),
                ('author_date_utc', models.DateTimeField(help_text='The date the commit was authored in UTC.', verbose_name='Author Date')),
                ('author_date_offset', models.IntegerField(help_text="The author's UTC offset.", verbose_name='Author Date UTC Offset')),
                ('committer_name', models.CharField(blank=True, help_text='The name of the committer (if applicable).', max_length=256, null=True, verbose_name='Committer Name')),
                ('committer_email', models.CharField(blank=True, help_text='The e-mail address of the committer (if applicable).', max_length=256, null=True, verbose_name='Committer Email')),
                ('committer_date_utc', models.DateTimeField(blank=True, help_text='The date the commit was committed in UTC (if applicable).', null=True, verbose_name='Committer Date')),
                ('committer_date_offset', models.IntegerField(blank=True, help_text="The committer's UTC offset (if applicable).", null=True, verbose_name='Committer Date UTC Offset')),
                ('commit_message', models.TextField(help_text='The commit message.', verbose_name='Description')),
                ('commit_id', models.CharField(help_text='The unique identifier of the commit.', max_length=64, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z0-9]{1,64}', 32), 'Commits must be alphanumeric.')], verbose_name='Commit ID')),
                ('parent_id', models.CharField(help_text='The unique identifier of the parent commit.', max_length=64, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z0-9]{1,64}', 32), 'Commits must be alphanumeric.')], verbose_name='Parent ID')),
                ('last_modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Last Modified')),
                ('extra_data', djblets.db.fields.json_field.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Diff Commit',
                'verbose_name_plural': 'Diff Commits',
                'db_table': 'diffviewer_diffcommit',
                'ordering': ('pk',),
            },
        ),
        migrations.CreateModel(
            name='DiffSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('revision', models.IntegerField(verbose_name='revision')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='timestamp')),
                ('basedir', models.CharField(blank=True, default='', max_length=256, verbose_name='base directory')),
                ('diffcompat', models.IntegerField(default=0, help_text='The diff generator compatibility version to use. This can and should be ignored.', verbose_name='differ compatibility version')),
                ('base_commit_id', models.CharField(blank=True, db_index=True, help_text='The ID/revision this change is built upon.', max_length=64, null=True, verbose_name='commit ID')),
                ('commit_count', djblets.db.fields.relation_counter_field.RelationCounterField(blank=True, default=None, null=True)),
                ('extra_data', djblets.db.fields.json_field.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Diff Set',
                'verbose_name_plural': 'Diff Sets',
                'db_table': 'diffviewer_diffset',
                'ordering': ['revision', 'timestamp'],
                'get_latest_by': 'revision',
            },
        ),
        migrations.CreateModel(
            name='DiffSetHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='timestamp')),
                ('last_diff_updated', models.DateTimeField(blank=True, default=None, null=True, verbose_name='last updated')),
                ('extra_data', djblets.db.fields.json_field.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Diff Set History',
                'verbose_name_plural': 'Diff Set Histories',
                'db_table': 'diffviewer_diffsethistory',
            },
        ),
        migrations.CreateModel(
            name='FileDiff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_file', models.CharField(max_length=1024, verbose_name='source file')),
                ('dest_file', models.CharField(max_length=1024, verbose_name='destination file')),
                ('source_revision', models.CharField(max_length=512, verbose_name='source file revision')),
                ('dest_detail', models.CharField(max_length=512, verbose_name='destination file details')),
                ('binary', models.BooleanField(default=False, verbose_name='binary file')),
                ('status', models.CharField(choices=[('C', 'Copied'), ('D', 'Deleted'), ('M', 'Modified'), ('V', 'Moved')], max_length=1, verbose_name='status')),
                ('diff64', djblets.db.fields.base64_field.Base64Field(blank=True, db_column='diff_base64', verbose_name='diff')),
                ('parent_diff64', djblets.db.fields.base64_field.Base64Field(blank=True, db_column='parent_diff_base64', verbose_name='parent diff')),
                ('extra_data', djblets.db.fields.json_field.JSONField(blank=True, null=True)),
                ('commit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='diffviewer.DiffCommit', verbose_name='diff commit')),
            ],
            options={
                'verbose_name': 'File Diff',
                'verbose_name_plural': 'File Diffs',
                'db_table': 'diffviewer_filediff',
            },
        ),
        migrations.CreateModel(
            name='FileUntouchedComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('untouched_file_path', models.CharField(default='', max_length=1024, verbose_name='path')),
                ('untouched_file_hashcode', models.CharField(default='', max_length=512, verbose_name='hashcode')),
            ],
            options={
                'db_table': 'fileviewer_untouchedcomment',
            },
        ),
        migrations.CreateModel(
            name='LegacyFileDiffData',
            fields=[
                ('binary_hash', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='hash')),
                ('binary', djblets.db.fields.base64_field.Base64Field(verbose_name='base64')),
                ('extra_data', djblets.db.fields.json_field.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Legacy File Diff Data',
                'verbose_name_plural': 'Legacy File Diff Data Blobs',
                'db_table': 'diffviewer_filediffdata',
            },
        ),
        migrations.CreateModel(
            name='RawFileDiffData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('binary_hash', models.CharField(max_length=40, unique=True, verbose_name='hash')),
                ('binary', models.BinaryField()),
                ('compression', models.CharField(blank=True, choices=[('B', 'BZip2-compressed')], max_length=1, null=True)),
                ('extra_data', djblets.db.fields.json_field.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Raw File Diff Data',
                'verbose_name_plural': 'Raw File Diff Data Blobs',
                'db_table': 'diffviewer_rawfilediffdata',
            },
        ),
        migrations.AddField(
            model_name='filediff',
            name='diff_hash',
            field=models.ForeignKey(blank=True, db_column='raw_diff_hash_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='filediffs', to='diffviewer.RawFileDiffData'),
        ),
        migrations.AddField(
            model_name='filediff',
            name='diffset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='diffviewer.DiffSet', verbose_name='diff set'),
        ),
        migrations.AddField(
            model_name='filediff',
            name='legacy_diff_hash',
            field=models.ForeignKey(blank=True, db_column='diff_hash_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='filediffs', to='diffviewer.LegacyFileDiffData'),
        ),
        migrations.AddField(
            model_name='filediff',
            name='legacy_parent_diff_hash',
            field=models.ForeignKey(blank=True, db_column='parent_diff_hash_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_filediffs', to='diffviewer.LegacyFileDiffData'),
        ),
        migrations.AddField(
            model_name='filediff',
            name='parent_diff_hash',
            field=models.ForeignKey(blank=True, db_column='raw_parent_diff_hash_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_filediffs', to='diffviewer.RawFileDiffData'),
        ),
        migrations.AddField(
            model_name='diffset',
            name='history',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='diffsets', to='diffviewer.DiffSetHistory', verbose_name='diff set history'),
        ),
        migrations.AddField(
            model_name='diffset',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diffsets', to='scmtools.Repository', verbose_name='repository'),
        ),
        migrations.AddField(
            model_name='diffcommit',
            name='diffset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commits', to='diffviewer.DiffSet'),
        ),
        migrations.AlterUniqueTogether(
            name='diffcommit',
            unique_together=set([('diffset', 'commit_id')]),
        ),
    ]
